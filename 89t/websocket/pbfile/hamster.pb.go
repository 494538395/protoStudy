// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.3
// source: partyBattle/hamster.proto

package pbfile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 此协议用作同步仓鼠移动角度
type HamsterChangeDirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	NewDirection float32 `protobuf:"fixed32,2,opt,name=newDirection,proto3" json:"newDirection,omitempty"` // 新的移动角度
}

func (x *HamsterChangeDirection) Reset() {
	*x = HamsterChangeDirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterChangeDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterChangeDirection) ProtoMessage() {}

func (x *HamsterChangeDirection) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterChangeDirection.ProtoReflect.Descriptor instead.
func (*HamsterChangeDirection) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{0}
}

func (x *HamsterChangeDirection) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *HamsterChangeDirection) GetNewDirection() float32 {
	if x != nil {
		return x.NewDirection
	}
	return 0
}

type HamsterGetReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string        `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	Reward *CommonReward `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *HamsterGetReward) Reset() {
	*x = HamsterGetReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterGetReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterGetReward) ProtoMessage() {}

func (x *HamsterGetReward) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterGetReward.ProtoReflect.Descriptor instead.
func (*HamsterGetReward) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{1}
}

func (x *HamsterGetReward) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *HamsterGetReward) GetReward() *CommonReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

// 此协议用作同步玩家炸晕状态
type HamsterBoomDizzy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"` // 被炸弹炸晕的用户 ID
}

func (x *HamsterBoomDizzy) Reset() {
	*x = HamsterBoomDizzy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterBoomDizzy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterBoomDizzy) ProtoMessage() {}

func (x *HamsterBoomDizzy) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterBoomDizzy.ProtoReflect.Descriptor instead.
func (*HamsterBoomDizzy) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{2}
}

func (x *HamsterBoomDizzy) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 此协议用作同步玩家从炸晕恢复清醒状态
type HamsterBoomRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *HamsterBoomRecover) Reset() {
	*x = HamsterBoomRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterBoomRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterBoomRecover) ProtoMessage() {}

func (x *HamsterBoomRecover) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterBoomRecover.ProtoReflect.Descriptor instead.
func (*HamsterBoomRecover) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{3}
}

func (x *HamsterBoomRecover) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type HamsterBombInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bombs []*HamsterBomb `protobuf:"bytes,1,rep,name=bombs,proto3" json:"bombs,omitempty"`
}

func (x *HamsterBombInfos) Reset() {
	*x = HamsterBombInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterBombInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterBombInfos) ProtoMessage() {}

func (x *HamsterBombInfos) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterBombInfos.ProtoReflect.Descriptor instead.
func (*HamsterBombInfos) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{4}
}

func (x *HamsterBombInfos) GetBombs() []*HamsterBomb {
	if x != nil {
		return x.Bombs
	}
	return nil
}

// 此协议用作广播初始化数据
type HamsterGameStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bombs      []*HamsterBomb `protobuf:"bytes,1,rep,name=bombs,proto3" json:"bombs,omitempty"`            // 炸弹信息
	Nut        *HamsterNut    `protobuf:"bytes,2,opt,name=nut,proto3" json:"nut,omitempty"`                // 仓鼠信息
	GameSecond int32          `protobuf:"varint,3,opt,name=gameSecond,proto3" json:"gameSecond,omitempty"` // 游戏时长（秒）
}

func (x *HamsterGameStart) Reset() {
	*x = HamsterGameStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterGameStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterGameStart) ProtoMessage() {}

func (x *HamsterGameStart) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterGameStart.ProtoReflect.Descriptor instead.
func (*HamsterGameStart) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{5}
}

func (x *HamsterGameStart) GetBombs() []*HamsterBomb {
	if x != nil {
		return x.Bombs
	}
	return nil
}

func (x *HamsterGameStart) GetNut() *HamsterNut {
	if x != nil {
		return x.Nut
	}
	return nil
}

func (x *HamsterGameStart) GetGameSecond() int32 {
	if x != nil {
		return x.GameSecond
	}
	return 0
}

// 此协议用作描述瓜子坐标
type HamsterNut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (x *HamsterNut) Reset() {
	*x = HamsterNut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterNut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterNut) ProtoMessage() {}

func (x *HamsterNut) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterNut.ProtoReflect.Descriptor instead.
func (*HamsterNut) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{6}
}

func (x *HamsterNut) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *HamsterNut) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// 此协议用作描述炸弹信息
type HamsterBomb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	X         float32 `protobuf:"fixed32,2,opt,name=X,proto3" json:"X,omitempty"`
	Y         float32 `protobuf:"fixed32,3,opt,name=Y,proto3" json:"Y,omitempty"`
	Direction int32   `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`
	Speed     int32   `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *HamsterBomb) Reset() {
	*x = HamsterBomb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterBomb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterBomb) ProtoMessage() {}

func (x *HamsterBomb) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterBomb.ProtoReflect.Descriptor instead.
func (*HamsterBomb) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{7}
}

func (x *HamsterBomb) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *HamsterBomb) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *HamsterBomb) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *HamsterBomb) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *HamsterBomb) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

// 此协议用作同步玩家吃瓜子状态
type HamsterEatNut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *HamsterEatNut) Reset() {
	*x = HamsterEatNut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterEatNut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterEatNut) ProtoMessage() {}

func (x *HamsterEatNut) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterEatNut.ProtoReflect.Descriptor instead.
func (*HamsterEatNut) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{8}
}

func (x *HamsterEatNut) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// 此协议用作广播游戏结束信息
type HamsterGameEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winner string             `protobuf:"bytes,1,opt,name=winner,proto3" json:"winner,omitempty"` // 游戏获胜者
	Rank   []*HamsterUserRank `protobuf:"bytes,2,rep,name=rank,proto3" json:"rank,omitempty"`     // 游戏终局排行榜
}

func (x *HamsterGameEnd) Reset() {
	*x = HamsterGameEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterGameEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterGameEnd) ProtoMessage() {}

func (x *HamsterGameEnd) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterGameEnd.ProtoReflect.Descriptor instead.
func (*HamsterGameEnd) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{9}
}

func (x *HamsterGameEnd) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *HamsterGameEnd) GetRank() []*HamsterUserRank {
	if x != nil {
		return x.Rank
	}
	return nil
}

// 此协议用作描述玩家积分信息
type HamsterUserRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户
	Score  int32  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`  // 用户分数
	Rank   int32  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`    // 用户排名
}

func (x *HamsterUserRank) Reset() {
	*x = HamsterUserRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partyBattle_hamster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HamsterUserRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HamsterUserRank) ProtoMessage() {}

func (x *HamsterUserRank) ProtoReflect() protoreflect.Message {
	mi := &file_partyBattle_hamster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HamsterUserRank.ProtoReflect.Descriptor instead.
func (*HamsterUserRank) Descriptor() ([]byte, []int) {
	return file_partyBattle_hamster_proto_rawDescGZIP(), []int{10}
}

func (x *HamsterUserRank) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *HamsterUserRank) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *HamsterUserRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

var File_partyBattle_hamster_proto protoreflect.FileDescriptor

var file_partyBattle_hamster_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x2f, 0x68, 0x61,
	0x6d, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x54, 0x0a, 0x16, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x10, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x6d,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6d, 0x44, 0x69, 0x7a, 0x7a, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x12, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x10, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f,
	0x6d, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x62, 0x6f, 0x6d, 0x62, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x6f, 0x6d, 0x62, 0x52, 0x05, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x22, 0x75, 0x0a, 0x10, 0x48,
	0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x05, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6d, 0x62, 0x52, 0x05, 0x62, 0x6f,
	0x6d, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x6e, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x74, 0x52, 0x03, 0x6e,
	0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x22, 0x28, 0x0a, 0x0a, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x74,
	0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x58, 0x12, 0x0c,
	0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x59, 0x22, 0x6d, 0x0a, 0x0b,
	0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6f, 0x6d, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x0c, 0x0a, 0x01, 0x58,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x59, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x0d, 0x48,
	0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x45, 0x61, 0x74, 0x4e, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x0e, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x48,
	0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x22, 0x53, 0x0a, 0x0f, 0x48, 0x61, 0x6d, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_partyBattle_hamster_proto_rawDescOnce sync.Once
	file_partyBattle_hamster_proto_rawDescData = file_partyBattle_hamster_proto_rawDesc
)

func file_partyBattle_hamster_proto_rawDescGZIP() []byte {
	file_partyBattle_hamster_proto_rawDescOnce.Do(func() {
		file_partyBattle_hamster_proto_rawDescData = protoimpl.X.CompressGZIP(file_partyBattle_hamster_proto_rawDescData)
	})
	return file_partyBattle_hamster_proto_rawDescData
}

var file_partyBattle_hamster_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_partyBattle_hamster_proto_goTypes = []interface{}{
	(*HamsterChangeDirection)(nil), // 0: HamsterChangeDirection
	(*HamsterGetReward)(nil),       // 1: HamsterGetReward
	(*HamsterBoomDizzy)(nil),       // 2: HamsterBoomDizzy
	(*HamsterBoomRecover)(nil),     // 3: HamsterBoomRecover
	(*HamsterBombInfos)(nil),       // 4: HamsterBombInfos
	(*HamsterGameStart)(nil),       // 5: HamsterGameStart
	(*HamsterNut)(nil),             // 6: HamsterNut
	(*HamsterBomb)(nil),            // 7: HamsterBomb
	(*HamsterEatNut)(nil),          // 8: HamsterEatNut
	(*HamsterGameEnd)(nil),         // 9: HamsterGameEnd
	(*HamsterUserRank)(nil),        // 10: HamsterUserRank
	(*CommonReward)(nil),           // 11: CommonReward
}
var file_partyBattle_hamster_proto_depIdxs = []int32{
	11, // 0: HamsterGetReward.reward:type_name -> CommonReward
	7,  // 1: HamsterBombInfos.bombs:type_name -> HamsterBomb
	7,  // 2: HamsterGameStart.bombs:type_name -> HamsterBomb
	6,  // 3: HamsterGameStart.nut:type_name -> HamsterNut
	10, // 4: HamsterGameEnd.rank:type_name -> HamsterUserRank
	5,  // [5:5] is the sub-list for method output_type
	5,  // [5:5] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_partyBattle_hamster_proto_init() }
func file_partyBattle_hamster_proto_init() {
	if File_partyBattle_hamster_proto != nil {
		return
	}
	file_common_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_partyBattle_hamster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterChangeDirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterGetReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterBoomDizzy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterBoomRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterBombInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterGameStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterNut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterBomb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterEatNut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterGameEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partyBattle_hamster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HamsterUserRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_partyBattle_hamster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_partyBattle_hamster_proto_goTypes,
		DependencyIndexes: file_partyBattle_hamster_proto_depIdxs,
		MessageInfos:      file_partyBattle_hamster_proto_msgTypes,
	}.Build()
	File_partyBattle_hamster_proto = out.File
	file_partyBattle_hamster_proto_rawDesc = nil
	file_partyBattle_hamster_proto_goTypes = nil
	file_partyBattle_hamster_proto_depIdxs = nil
}
